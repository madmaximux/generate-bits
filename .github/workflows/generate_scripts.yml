name: Generate scripts

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"  # Runs daily at midnight UTC
  workflow_dispatch:

jobs:
  build:
    name: Generate Scripts
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python3.9/site-packages
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Execute Python scripts
        run: |
          set -e
          echo "Generating standard scripts..."
          python scripts/docker-bits/generate_scripts_standard.py
          echo "Generating custom scripts..."
          python scripts/docker-bits/generate_scripts_custom.py

      - name: Upload generated files
        uses: actions/upload-artifact@v4
        with:
          name: docker-bits-lsio-output
          path: ./output/docker-bits/lsio

  test:
    name: Test docker-compose files
    runs-on: ubuntu-latest
    needs: build

    env:
      SOURCE_PATH: ./output/docker-bits/lsio

    strategy:
      matrix:
        service: [plex, sonarr]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download generated files
        uses: actions/download-artifact@v4
        with:
          name: docker-bits-lsio-output
          path: ./output/docker-bits/lsio

      - name: Set up docker-compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: '2.14.2'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore Docker image cache
        uses: actions/cache@v3
        with:
          path: ./docker-cache
          key: ${{ runner.os }}-docker-images-${{ matrix.service }}

      - name: Pre-pull and cache Docker image with digest check
        run: |
          set -e
          mkdir -p docker-cache
          SERVICE="${{ matrix.service }}"
          IMAGE="lscr.io/linuxserver/${SERVICE}:latest"
      
          # Get digest for amd64 architecture and shorten to 12 chars
          latest_digest=$(docker manifest inspect "$IMAGE" | \
            jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest' | \
            head -n 1 | sed 's/sha256://' | cut -c1-12)
      
          # Fallback if manifest inspect fails
          if [ -z "$latest_digest" ] || [ "$latest_digest" = "null" ]; then
            echo "Failed to get digest via manifest. Pulling image normally..."
            docker pull "$IMAGE"
            latest_digest=$(docker image inspect "$IMAGE" --format '{{index .RepoDigests 0}}' | \
              awk -F@ '{print $2}' | sed 's/sha256://' | cut -c1-12)
          fi
      
          # Look for cached file with shortened digest
          cached_file=$(find docker-cache -maxdepth 1 -type f -name "${SERVICE}-${latest_digest}*.tar" | head -n 1)
      
          if [ -n "$cached_file" ]; then
            echo "Using existing cache: $cached_file"
            docker load -i "$cached_file"
          else
            echo "No valid cached image found; pulling new image..."
            docker pull "$IMAGE"
            
            # Create new tarball with shortened digest
            new_file="docker-cache/${SERVICE}-${latest_digest}.tar"
            echo "Saving new image to $new_file"
            docker save "$IMAGE" -o "$new_file"
            
            # Clean up old cached files for this service
            find docker-cache -maxdepth 1 -type f -name "${SERVICE}-*.tar" ! -name "${SERVICE}-${latest_digest}*" -exec rm {} +
          fi
        shell: bash

      - name: Start Docker Compose Services
        run: docker-compose -f ${SOURCE_PATH}/custom/${{ matrix.service }}/docker-compose.yaml up -d

      - name: Wait for Containers to Start
        run: sleep 5

      - name: List Running Containers
        run: docker ps

      - name: Stop and Remove Containers
        run: docker-compose -f ${SOURCE_PATH}/custom/${{ matrix.service }}/docker-compose.yaml down

  deploy:
    name: Push Output to Destination Repository
    runs-on: ubuntu-latest
    needs: test

    env:
      SOURCE_PATH: ./output/docker-bits/lsio
      DESTINATION_REPO: madmaximux/docker-bits
      DESTINATION_BRANCH: main
      DESTINATION_FOLDER: lsio

    steps:
      - uses: actions/checkout@v4

      - name: Download generated files
        uses: actions/download-artifact@v4
        with:
          name: docker-bits-lsio-output
          path: ./output/docker-bits/lsio

      - name: Pushes output to destination repository
        if: success()
        uses: crykn/copy_folder_to_another_repo_action@v1.0.6
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_folder: ${{ env.SOURCE_PATH }}
          destination_repo: ${{ env.DESTINATION_REPO }}
          destination_branch: ${{ env.DESTINATION_BRANCH }}
          destination_folder: ${{ env.DESTINATION_FOLDER }}
          user_name: ${{ vars.USER_NAME }}
          user_email: ${{ vars.USER_EMAIL }}
          commit_msg: 'Workflow update'